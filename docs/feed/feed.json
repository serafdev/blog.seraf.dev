{
  "version": "https://jsonfeed.org/version/1",
  "title": "Fares&#39; Blog",
  "home_page_url": "https://serafdev.github.io",
  "feed_url": "https://serafdev.github.io/feed/feed.json",
  "description": "Just another Software blog.",
  "author": {
    "name": "Fares B.",
    "url": ""
  },
  "items": [{
      "id": "https://serafdev.github.io/posts/2020-05-30-go-livereload/",
      "url": "https://serafdev.github.io/posts/2020-05-30-go-livereload/",
      "title": "Run an auto-reload Go web development server with Docker",
      "content_html": "<p>In this short tutorial, I will show you how to run a development server during Go web development. This made me skip the need to go to my terminal and re-run “go run main.go” 73 times an hour (Spoil-alert: I didn’t wait until that number, I’m very lazy).</p>\n<p>I suggest following along, else if you are already comfortable with Docker/Docker-Compose and Go web development, you can jump directly to the TL;DR at the end of the article.</p>\n<p>First let’s write a small app that we will run locally.</p>\n<p>Create a folder named godev, create a file named main.go in there and put the following content in it:</p>\n<pre class=\"language-go\"><code class=\"language-go\">    <span class=\"token keyword\">package</span> main<br>    <br>    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span><br>        <span class=\"token string\">\"fmt\"</span><br>        <span class=\"token string\">\"net/http\"</span><br>    <span class=\"token punctuation\">)</span><br>    <br>    <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// Bind anonymous function to root route \"/\"</span><br>        http<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// Returns string \"Livemounted Version One\" to the http writer.</span><br>            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Livemounted %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Version One\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Serving Go app on port 8081\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token comment\">// Serves on port 8081</span><br>        http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8081\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span></code></pre>\n<p>main.go<br>\nSimply put, we run an http server with one route “/” returning string “Livemounted Version One”.</p>\n<p>Now create your go module, go in the folder and run in a terminal (replace the url with a unique link of your choice):</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go mod init github.com/yourusername/godev</code></pre>\n<p>We can test this by running in the terminal:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">go run main.go</code></pre>\n<p>Now visit the http server at localhost:8081, you will see “Livemounted Version One”</p>\n<p>Let’s change the “One” to a “Two” on line 10. Let’s kill the go service and run again the go run main.go. We now serve “Livemounted Version Two”, as you can see, this workflow is not efficient, especially when you get up to speed with the language and have to modify and test multiple things per minute, just the process of going to the terminal and re-running your application can get heavy on your workflow and is not efficient.</p>\n<p>A good way to automate something like this is inotify, it will watch all the files (using a regex, in our case .go$) and when it detects changes it will run a command, what we want exactly is: “When a .go file changes in my directory, execute go run main.go”</p>\n<p>There is other tools like inotify and luckily it is easy to write your own script that does that. Since we are already in a Go environment, I picked <a href=\"http://github.com/cespare/reflex\">github.com/cespare/reflex</a>, it is written in Go (that way I won’t be bothered with downloadomg other Linux tools).</p>\n<p>Put this content in a <a href=\"http://docker-entrypoint.sh\">docker-entrypoint.sh</a> file:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Running docker-entrypoint.sh\"</span><br>reflex -r <span class=\"token string\">'\\.go$'</span> -s -- <span class=\"token function\">sh</span> -c <span class=\"token string\">'echo \"Running development server\" &amp;&amp; go mod tidy &amp;&amp; go run main.go'</span><br></code></pre>\n<p><a href=\"http://docker-entrypoint.sh\">docker-entrypoint.sh</a><br>\nBasically we run the reflex command using regex .go$ and execute as a shell script go mod tidy and go run main.go, these will make sure that if you imported new libraries, it will update the go modules inside your container</p>\n<p>And this in a file named Dockerfile:</p>\n<pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> golang<span class=\"token punctuation\">:</span>1.14.3<span class=\"token punctuation\">-</span>buster<br><br><span class=\"token keyword\">WORKDIR</span> /app<br><br><span class=\"token keyword\">RUN</span> go get github.com/cespare/reflex <br><br><span class=\"token keyword\">COPY</span> docker<span class=\"token punctuation\">-</span>entrypoint.sh /docker<span class=\"token punctuation\">-</span>entrypoint.sh<br><br><span class=\"token keyword\">RUN</span> sed <span class=\"token punctuation\">-</span>i <span class=\"token string\">'s/\\r//'</span> /docker<span class=\"token punctuation\">-</span>entrypoint.sh<br><br><span class=\"token keyword\">VOLUME</span> godev<br><br><span class=\"token keyword\">ENTRYPOINT</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sh\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/docker-entrypoint.sh\"</span><span class=\"token punctuation\">]</span></code></pre>\n<p>Dockerfile<br>\nHere all we do is download reflex and copy the docker-entrypoint. The RUN sed line only makes sure that it removes that \\r EOL character that I inserted when using Windows. I don’t need that line when I write my docker-entrypoint using Linux or Mac, but better safe than sorry.</p>\n<p>The VOLUME directive tells the Docker-image that it’s expecting the user to mount a volume named godev and as an ENTRYPOINT, we just run the content of the docker-entrypoint above.</p>\n<p>The reason we using a docker-entrypoint is because the reflex command shouldn’t run at build time, which the CMD directive does, an ENTRYPOINT directive only runs after all volumes are mounted, this makes it safe running go mod tidy and having an environment that is live-proof (aka no mounting overrides, etc)</p>\n<p>Okay, now let’s run all of this, let’s create a docker-compose file to make it easier to build and run, create a docker-compose.yml file and put this content in it:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span><br>    <br>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">godev</span><span class=\"token punctuation\">:</span><br><br>    <span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">godev</span><span class=\"token punctuation\">:</span><br>        <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span><br>          <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> .<br>        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span><br>          <span class=\"token punctuation\">-</span> 8081<span class=\"token punctuation\">:</span><span class=\"token number\">8081</span><br>        <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span><br>          <span class=\"token punctuation\">-</span> ./<span class=\"token punctuation\">:</span>/app<br>          <span class=\"token punctuation\">-</span> godev<span class=\"token punctuation\">:</span>/go</code></pre>\n<p>docker-compose.yml<br>\nThis config will mount your current directory into /app and will create a godev volume and mount it to /go ($GOPATH). This will serve as cache for your libraries during your development.</p>\n<p>Let’s run that:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker-compose up</code></pre>\n<p>Now you should see this as output:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">godev_1 <span class=\"token operator\">|</span> Running docker-entrypoint.sh<br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Starting <span class=\"token function\">service</span><br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Running development server<br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Serving Go app on port <span class=\"token number\">8081</span></code></pre>\n<p>If you go to 8081, you should see “Livemount Version Two” (as we changed it at some step). Now let’s go to our code and bump the Version, in this case “Version Three”. Save your file and your output should look like this:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">godev_1 <span class=\"token operator\">|</span> Running docker-entrypoint.sh<br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Starting <span class=\"token function\">service</span><br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Running development server<br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Serving Go app on port <span class=\"token number\">8081</span><br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Killing <span class=\"token function\">service</span><br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> ^Csignal: interrupt<br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Starting <span class=\"token function\">service</span><br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Running development server<br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Serving Go app on port <span class=\"token number\">8081</span></code></pre>\n<p>NOICE, automatic rebuilds and at 8081 we can find our updated code.</p>\n<p>Welp, that’s it! This also helps a lot when you have an environment using multiple databases and don’t want to be bothered with port mappings etc, you’re already in your docker network. All right, thanks for reading!</p>\n<h1 id=\"tl%3Bdr\">TL;DR <a class=\"direct-link\" href=\"#tl%3Bdr\">#</a></h1>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone <span class=\"token punctuation\">[</span>https://github.com/serafdev/godev.git<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://github.com/serafdev/godev.git<span class=\"token punctuation\">)</span><br><br><span class=\"token builtin class-name\">cd</span> godev <span class=\"token operator\">&amp;&amp;</span> docker-compose up</code></pre>\n<p>Visit localhost:8081, you will see “Livemount Version One” on the page</p>\n<p>Now open main.go and bump the Version in the “/” route, you will see the docker-compose logs look like this:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">godev_1 <span class=\"token operator\">|</span> Running docker-entrypoint.sh<br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Starting <span class=\"token function\">service</span><br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Running development server<br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Serving Go app on port <span class=\"token number\">8081</span><br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Killing <span class=\"token function\">service</span><br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> ^Csignal: interrupt<br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Starting <span class=\"token function\">service</span><br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Running development server<br>godev_1 <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span>00<span class=\"token punctuation\">]</span> Serving Go app on port <span class=\"token number\">8081</span><br><br></code></pre>\n<p>Now refresh your browser, you should see “Livemount Version Two”</p>\n<p>Okay thanx for reading!</p>\n",
      "date_published": "2020-05-30T00:00:00-04:00"
    },{
      "id": "https://serafdev.github.io/posts/2020-05-30-a-guide-to-integrate-utterances-with-ghost-blog/",
      "url": "https://serafdev.github.io/posts/2020-05-30-a-guide-to-integrate-utterances-with-ghost-blog/",
      "title": "A Guide to integrate Utterances with Ghost Blog.",
      "content_html": "<h3 id=\"utterances-integration\">Utterances Integration <a class=\"direct-link\" href=\"#utterances-integration\">#</a></h3>\n<p>So I came across a pretty cool open source project that let’s you use github issues to integrate commenting to your blogposts.</p>\n<p>Adding to this other pretty cool open source blog project named ghost, the combination to me is the best since I don't like reinventing the wheel.</p>\n<p>For more information here is the link: <a href=\"https://utteranc.es/\">https://utteranc.es/</a></p>\n<p>For the blog: <a href=\"https://ghost.org\">https://ghost.org</a></p>\n<p>Basically, all you'll have to do is to copy the Utterance snippet and put it inside the <code>post.hbs</code> file, then zip the modified theme and upload it to your blog.</p>\n<p>The snippet that you need to copy:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">    <span class=\"token operator\">&lt;</span>script <span class=\"token assign-left variable\">src</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://utteranc.es/client.js\"</span><br>        <span class=\"token assign-left variable\">repo</span><span class=\"token operator\">=</span><span class=\"token string\">\"user/repo\"</span><br>        issue-term<span class=\"token operator\">=</span><span class=\"token string\">\"pathname\"</span><br>        <span class=\"token assign-left variable\">theme</span><span class=\"token operator\">=</span><span class=\"token string\">\"github-dark\"</span><br>        <span class=\"token assign-left variable\">crossorigin</span><span class=\"token operator\">=</span><span class=\"token string\">\"anonymous\"</span><br>        async<span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span>/script<span class=\"token operator\">></span><br></code></pre>\n<p>For example, I use the Casper theme so I forked the official github repository of Casper and added that snippet there, then I Downloaded the repository as Zip and uploaded that to my Ghost blog.</p>\n<p>Here's the permalink for the modified code:</p>\n<p><a href=\"https://github.com/serafdev/Casper/blob/777098a35b869060aefc664aceb8ad70b9290c27/post.hbs#L117\">https://github.com/serafdev/Casper/blob/777098a35b869060aefc664aceb8ad70b9290c27/post.hbs#L117</a></p>\n",
      "date_published": "2020-05-30T00:00:00-04:00"
    },{
      "id": "https://serafdev.github.io/posts/2020-05-19-how-to-use-caddy-as-a-reverse-proxy-with-auto-tls/",
      "url": "https://serafdev.github.io/posts/2020-05-19-how-to-use-caddy-as-a-reverse-proxy-with-auto-tls/",
      "title": "How to use Caddy as a Reverse-Proxy (With auto-TLS)",
      "content_html": "<p>Caddy offers TLS encryption by default (https) and it uses Let’s Encrypt’s authority to automatically generate your certificates. In this short tutorial we will run a small backend and a Caddy web server as a reverse proxy, first in local, and then in a virtual machine on the Cloud (because ports 80 and 443 are blocked in my home, please ISP providers, stop that already). We could’ve used a different port to serve https but it’s not as cool.</p>\n<p>Let’s pull the code needed for this tutorial:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone <span class=\"token punctuation\">[</span>https://github.com/serafdev/reverse-caddy.git<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://github.com/serafdev/reverse-caddy.git<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> reverse-caddy</code></pre>\n<p>The only file we need to inspect is the docker-compose.yml file, the others can be ignored, they are only used to build and run a small backend server to test our reverse-proxy situation. Let’s break it down.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">    version: <span class=\"token string\">'3'</span><br>    volumes:<br>      caddy_data:<br>      caddy_config:<br>    services:<br>      caddy:<br>        image: caddy<br>        volumes:<br>          - caddy_data:/data<br>          - caddy_config:/config<br>        ports:<br>          - <span class=\"token number\">80</span>:80<br>          - <span class=\"token number\">443</span>:443<br>        command: caddy reverse-proxy --from localhost --to backend:8081 <br>      backend:<br>        build:<br>          context: <span class=\"token builtin class-name\">.</span></code></pre>\n<p>We have here 2 services, caddy and backend. backend is the backend (woah) and caddy serves as a reverse proxy.</p>\n<p>There is 2 volumes attached to caddy, there’s caddy_data and caddy_config, these are used to have minimal persistance, of course I always suggest having all your network as code, but let’s go with this anyway as we are only running a reverse proxy.</p>\n<p>We expose ports 80 and 443 to enable redirection and https and we run the caddy command for the reverse-proxy:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">caddy reverse-proxy — from localhost — to backend:8081</code></pre>\n<p>In a caddy config this looks like:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">localhost<br><br>reverse-proxy backend:8081</code></pre>\n<p>Let’s build this:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker-compose up -d</code></pre>\n<p>Now you can visit localhost, it will redirect you to <a href=\"https://localhost,\">https://localhost</a><br>\n<img src=\"/content/images/2020/05/image-23.png\" alt=\"\">https, noice<br>\nIf we inspect the certificate, it is a self-signed certificate generated by Caddy. This is normal, for security reasons, a TLS certificate for localhost will never be generated by known Authorities. There’s is many tricks to bypass that, but just don’t.<br>\n<img src=\"/content/images/2020/05/image-24.png\" alt=\"\">Caddy Local Authority<br>\nOkay, let’s go to the next step, let’s create a virtual machine in any cloud, I will be using GCP. Don’t forget to allow HTTP and HTTPS on the firewall level. Ideally use a Ubuntu Server to keep following, but feel free to do whatever you need.</p>\n<p>Go to this link and follow the steps to install docker engine for Ubuntu: <a href=\"https://docs.docker.com/engine/install/ubuntu/\">https://docs.docker.com/engine/install/ubuntu/</a></p>\n<p>Now we’ll need docker-compose:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker-compose</code></pre>\n<p>Double check your installations with docker -v and docker-compose -v, you should have something like this:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">fares@instance-2:~$ docker-compose -v<br>docker-compose version <span class=\"token number\">1.17</span>.1, build unknown<br>fares@instance-2:~$ docker -v<br>Docker version <span class=\"token number\">19.03</span>.9, build 9d988398e7</code></pre>\n<p>Versions<br>\nOkay now install git:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span></code></pre>\n<p>And clone the repository we used earlier with the caddy reverse-proxy docker-compose config:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone <span class=\"token punctuation\">[</span>https://github.com/serafdev/reverse-caddy.git<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://github.com/serafdev/reverse-caddy.git<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> reverse-caddy</code></pre>\n<p>Now we just need to do some modifications in the docker-compose.yml file, on the “command” directive in caddy change “localhost” with one of your own domains. I will pick something from my Cloud DNS Zone (gcp.seraf.dev), let’s go with dydy for caddy (??).</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">version: <span class=\"token string\">'3'</span><br>volumes:<br>  caddy_data:<br>  caddy_config:<br>services:<br>  caddy:<br>    image: caddy<br>    volumes:<br>      - caddy_data:/data<br>      - caddy_config:/config<br>    ports:<br>      - <span class=\"token number\">80</span>:80<br>      - <span class=\"token number\">443</span>:443<br>    command: caddy reverse-proxy --from dydy.gcp.seraf.dev --to backend:8081 <br>  backend:<br>    build:<br>      context: <span class=\"token builtin class-name\">.</span></code></pre>\n<p>Now go to your DNS and add an A record for this new virtual machine, for me the domain name is “dydy.gcp.seraf.dev” and I use the external IP “<a href=\"https://35.188.19.184/\">35.188.19.184</a>”, I will make some pictures on how it looks like on GCP:<br>\n<img src=\"/content/images/2020/05/image-26.png\" alt=\"\">Compute Engine<br>\nAnd on Cloud DNS:<br>\n<img src=\"/content/images/2020/05/image-27.png\" alt=\"\">Cloud DNS<br>\nIt’s a good idea to create an NS record for your cloud environment to make small tests like this one as a developer or devops, else you can just do that inside your domain provider’s DNS config.</p>\n<p>I hid the SOA and NS record because I don’t know if it’s sensitive, but basically it just tells my domain provider to put gcp.seraf.dev in the GCP Nameserver, so you can create anything.gcp.seraf.dev from within your console.</p>\n<p>Okay back to our stuff, now that we setup the A record we can go back to the machine and run our docker-compose. Since we don’t care about this machine and permissions, you can run docker-compose up -d with elevated privileges:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> docker-compose up -d</code></pre>\n<p>Verify your deployment:<br>\n<img src=\"/content/images/2020/05/image-28.png\" alt=\"\">Wow, so small. Just zoom<br>\nOHHH yeahhh! We’ve done it! Now visit your url and look at the certificate, so simple right?<br>\n<img src=\"/content/images/2020/05/image-29.png\" alt=\"\">Easy to deploy certificate? Check.<br>\nAll right, hope this helped someone!</p>\n<p>For more information go ahead to their website, I am not affiliated with them (wish I was though) <a href=\"https://caddyserver.com/\">https://caddyserver.com/</a></p>\n",
      "date_published": "2020-05-19T00:00:00-04:00"
    },{
      "id": "https://serafdev.github.io/posts/2020-03-30-learn-devops-by-deploying-a-minecraft-server/",
      "url": "https://serafdev.github.io/posts/2020-03-30-learn-devops-by-deploying-a-minecraft-server/",
      "title": "Learn DevOps by deploying a Minecraft Server",
      "content_html": "<p>Learn about high availability services, CI/CD, Linux Services, Dynamic DNS and some more DevOps and sysadmin tasks, just by deploying your Minecraft server and automating the configuration files deployment.</p>\n<p>This is a beginner friendly tutorial aimed for everyone with hopes to enlighten everyone on the job of a DevOps engineer by going through your first (or not) automated deployment. For more advanced readers, you can skim through most paragraphs because they will go into details on explaining every corner.</p>\n<h1 id=\"prerequisites\">Prerequisites <a class=\"direct-link\" href=\"#prerequisites\">#</a></h1>\n<ul>\n<li>A machine running Ubuntu</li>\n<li>A GitHub account</li>\n<li>Access to your router’s ports management (for the ports forwarding)</li>\n</ul>\n<p>Install Ubuntu on any of your machines.</p>\n<p>At the time of this writing my setup looks like this: A small server right by my router in the corner of my dining room, running Ubuntu Server 18.04. You can use a spare Laptop or a Raspberry Pie, really, anything will do. For this tutorial, if you are already on Linux, you can just use your current installation.</p>\n<p>For the GitHub account, you can just visit the official website to create an account.</p>\n<p>You will also need to do some port forwarding so people can access your Minecraft server from outside your home network, also for having GitHub actions accessing your server for the automated deployments.</p>\n<p>Details on all of these will come through the article.</p>\n<h1 id=\"set-up\">Set up <a class=\"direct-link\" href=\"#set-up\">#</a></h1>\n<p>On your Linux machine, create a folder named /opt/minecraft and change it’s ownership to your main user. What this means is that the folder will be modifiable by you without the need to use super user privileges (sudo), to do so you can do:</p>\n<blockquote>\n<p>sudo mkdir /opt/minecraft</p>\n</blockquote>\n<blockquote>\n<p>sudo chown $USER /opt/minecraft</p>\n</blockquote>\n<p>This is where we will put our Minecraft server. Go ahead and download the server archive using “wget”, you can find the link at the page bellow by clicking on the green download button under Ubuntu Server Software for Ubuntu and hitting “Copy Link”, you can do that on another machine if you’re using Ubuntu Server, and just write it down there: <a href=\"https://www.minecraft.net/en-us/download/server/bedrock/\">https://www.minecraft.net/en-us/download/server/bedrock/</a></p>\n<p>At the time of writing, the command looks like this, make sure to use the latest version:</p>\n<blockquote>\n<p>wget <a href=\"https://minecraft.azureedge.net/bin-linux/bedrock-server-1.14.32.1.zip\">https://minecraft.azureedge.net/bin-linux/bedrock-server-1.14.32.1.zip</a> -P /tmp/</p>\n</blockquote>\n<p>-P /tmp/ is used to basically tell wget to put the file in the /tmp/ directory (P for prefix).</p>\n<p>Install unzip if you don’t already have it,</p>\n<blockquote>\n<p>sudo apt install unzip</p>\n</blockquote>\n<p>Now we can unzip the content of that file inside the folder we created earlier</p>\n<blockquote>\n<p>unzip /tmp/bedrock-server-1.14.32.1.zip -d /opt/minecraft</p>\n</blockquote>\n<p>Test your installation using:</p>\n<blockquote>\n<p>cd /opt/minecraft &amp;&amp; chmod +x ./bedrock_server &amp;&amp; LD_LIBRARY_PATH=. ./bedrock_server</p>\n</blockquote>\n<p>Basically, we go into the folder, we change the mod of the bedrock_server file to executable and run the server with environment variable LD_LIBRARY_PATH set to current location. Pretty simple when someone puts some words to those cryptic commands right?</p>\n<p>If the app runs smoothly, you should see a logstack like this one:</p>\n<blockquote>\n<p>NO LOG FILE! — setting up server logging…<br>\n[2020–03–29 23:14:30 INFO] Starting Server<br>\n[2020–03–29 23:14:30 INFO] Version 1.14.32.1<br>\n[2020–03–29 23:14:30 INFO] Session ID f6b04942–72ed-414d-88d3–024ad4c8683c<br>\n[2020–03–29 23:14:30 INFO] Level Name: Bedrock level<br>\n[2020–03–29 23:14:30 INFO] Game mode: 0 Survival<br>\n[2020–03–29 23:14:30 INFO] Difficulty: 1 EASY<br>\n[2020–03–29 23:14:30 INFO] opening worlds/Bedrock level/db<br>\n[2020–03–29 23:14:32 INFO] IPv4 supported, port: 19132<br>\n[2020–03–29 23:14:32 INFO] IPv6 supported, port: 19133<br>\n[2020–03–29 23:14:32 INFO] IPv4 supported, port: 57890<br>\n[2020–03–29 23:14:32 INFO] IPv6 supported, port: 40946<br>\n[2020–03–29 23:14:33 INFO] Server started.</p>\n</blockquote>\n<p>Hurray! We’re ready for the fun part.</p>\n<h1 id=\"the-minecraft-service-(linux-daemon)\">The Minecraft Service (Linux Daemon) <a class=\"direct-link\" href=\"#the-minecraft-service-(linux-daemon)\">#</a></h1>\n<p>A quick explanation of what a daemon is, it is just an application that runs in the background. Basically it logs nothing to your standard output (eh, generally, because you can hack a daemon that spams and takes control of your standard output if you want, but that’s beside the point). We want this because we don’t want to have to go manually open a terminal or a background terminal and run our Minecraft server. We are too lazy for that, we will automate everything.</p>\n<p>Here’s how our Minecraft Service looks like, I will explain every part afterwards.</p>\n<pre><code>[Unit]\nDescription=Minecraft Server\nAfter=network.target\n\n[Service]\nUser=minecraft\nGroup=minecraft\n\nType=Simple\n\nWorkingDirectory=/opt/minecraft\nExecStart=/bin/sh -c &quot;LD_LIBRARY_PATH=. ./bedrock_server&quot;\nTimeoutStopSec=20\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p>First we have the Description, After means, we want this service to run after the network is ready.</p>\n<p>In Service, we have our User and Group, replace these by yours. To find out in what group you’re in you can just run the command “group” on the shell, you will see a list of those, just pick the one named after your user. To keep it simple, Type=Simple (nice dad pun) means that the process running on ExecStart is the main process of this service. The WorkingDirectory is the working directory which is the location of our server /opt/minecraft.</p>\n<p>ExecStart is the command we tested before, sh -c means run this command as interpreted by sh. /bin/sh is the absolute path of shell. Timeout, is just the timeout of no response when it has to stop gracefully, and Restart=on-failure, means if there’s a crash it will try to restart again, if you stop it manually it will not restart except on reboot if you enable the service.</p>\n<p>Let’s test this! I have setup a repository for this, so go ahead and clone it.</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/serafss2/mineconf.git\">https://github.com/serafdev/mineconf.git</a> ~/mineconf</p>\n</blockquote>\n<p>Modify the minecraft.service file to put your User and Group, we will use nano for this but you can also use emacs or vi if you are comfortable with any other editor.</p>\n<blockquote>\n<p>nano ~/mineconf/minecraft.service</p>\n</blockquote>\n<p>“CTRL+x, Y, ENTER” to save your changes.</p>\n<p>Now let’s make a symbolic link to that file and put it in the services folder so it can be recognized by systemctl (services tool)</p>\n<blockquote>\n<p>ln -s $HOME/mineconf/minecraft.service /etc/systemd/system/minecraft.service</p>\n</blockquote>\n<p>Now your service should be ready to be started and enabled. Enabling a service makes it run when system boots.</p>\n<blockquote>\n<p>sudo systemctl start minecraft</p>\n</blockquote>\n<blockquote>\n<p>sudo systemctl enable minecraft</p>\n</blockquote>\n<p>You can check if the server started successfully with</p>\n<blockquote>\n<p>sudo systemctl status minecraft</p>\n</blockquote>\n<p>Now that’s working, we need to add a user to the whitelist so you can have him access the server! Go ahead and add yourself, open ~/mineconf/whitelist.json and add yourself in it. For Minecraft Bedrock server the content should look like this:</p>\n<pre><code>[\n  {\n    &quot;ignoresPlayerLimit&quot;: false,\n    &quot;name&quot;: &quot;AUser&quot;,\n    &quot;uuid&quot;: &quot;erf895cc-9x7v-7da5-fasd–asgaasqwe2214&quot;\n  }\n]\n</code></pre>\n<p>To findout what your uuid is you can paste your username into any Minecraft user lookup, it’ll give all the info. Here’s one: <a href=\"https://mcuuid.net/\">https://mcuuid.net/</a></p>\n<p>Now link that file to your minecraft server installation and restart the server:</p>\n<blockquote>\n<p>rm /opt/minecraft/whitelist.json</p>\n</blockquote>\n<blockquote>\n<p>ln -s $HOME/mineconf/whitelist.json /opt/minecraft/whitelist.json</p>\n</blockquote>\n<blockquote>\n<p>sudo systemctl restart minecraft</p>\n</blockquote>\n<p>Yeahh, now you’ve got your own minecraft server running in your home. Let’s test it! Go to another device in your home network, make sure you’re connected to the same network because we did not setup port forwarding and Dynamic DNS yet (more into these next), and log in to Minecraft, on the Server tab you should be able to see your Server online! Grreeat :) I personally play on both Windows and iPhone, my brother plays on Android and Windows and my other brother plays on the Nintendo Switch, and we can all join the same server! Pretty cool in my opinion!</p>\n<p>Okay, now let’s make it accessible from the outside world</p>\n<h1 id=\"port-forwarding\">Port Forwarding <a class=\"direct-link\" href=\"#port-forwarding\">#</a></h1>\n<p>Log in to your router, usually 192.168.0.1 or 192.168.0.2, look in the advance settings and Port Forwarding, sadly every router has it’s own specific settings so you might be better looking on duckduck.go “Port Forwarding <Router Model>” or just looking around yourself, add Port 19132 TCP/UDP forwarded to 19132 Your-Minecraft-Machine, do the same for Port 22 TCP forwarded to 22 Your-Minecraft-Machine.</p>\n<p>To just briefly explain what this is about, it is about accessing your server from the outside world. When someone writes your IP Address on minecraft, it will redirect the traffic to your router, but your router doesn’t know what to do with that address, because the address is your whole network’s IP Address. So basically with Port Forwarding, you tell your router “If someone contacts us at port 22 or 19132, redirect the traffic to the minecraft machine”, it should be fairly simple to setup.</p>\n<p>After you done that, let’s test it out! (I really like tests). Connect your PC or Mobile phone that runs minecraft to your LTE or hotspot connection (make sure to set the limit on Windows to 100MB or something low like that to not consume your whole data in case you forget downloads in the background). Go ahead and look at your external IP, on your minecraft machine, just run this command: <code>curl ifconfig.me</code> Click Add Server in minecraft and write that address down, put 19132 for the port.</p>\n<p>Yeahhh, you can already tell your friends to log into your server! You can take a small break and go build a house, playing minecraft is part of the tutorial.</p>\n<h1 id=\"dynamicdns\">DynamicDNS <a class=\"direct-link\" href=\"#dynamicdns\">#</a></h1>\n<p>Okay, now that you built your first house and waiting until the zombies go away because you have no bed yet. Let’s deal with the Dynamic IP issue. Common ISPs distribute ephemeral IP addresses to non-businesses, what this means is that if your router goes down and back up, you will be assigned a new IP Address and will have to go through getting the new IP and distributing it to your friends again, this is very annoying, this is what I used to do in college because I did not know much about basic networking.</p>\n<p>DynamicDNS is a feature domain providers provide for this exact problem, first let’s explain what DNS is. Basically the Domain Name System (DNS) is just like your contacts app, you got the name and some more information about your contact like his phone number, in this case it is just the IP Address that is assigned by your ISP (Internet Service Provider), so basically, instead of writing IP Addresses when we access websites, we instead write names and DNS servers will go get the IP address and bring us back the content we requested. Now, DynamicDNS is the same thing, but one of your computers in your home tells your Domain provider “Hey dude, I got a new IP Address, can you record this to the (decentralized) contact list?” This way, you won’t care if the IP Address changes.</p>\n<p>Personally, I have my own domains, they can go as low as 11 dollars (or even less), I use them for my emails and business, but for this tutorial we will go ahead and use noip. Go ahead and make a free account at <a href=\"https://www.noip.com/client/linux/noip-duc-linux.tar.gz\">https://www.noip.com/</a>. Finish all the initial setup and go on the DynamicDNS tab, pick your hostname and click next, fill in the information they ask you, put Minecraft Server or just skip the second step, pick yes for Device always connected on the network, click on download the DUC, it will show the steps on how to install the app that will update the DNS automatically.</p>\n<p>I will add the commands here, but you basically can just follow their tutorial for this. At this time, we’re at version 2.1.9, but for the 4th step, you can write no-ip- and hit tab to autocomplete.</p>\n<blockquote>\n<p><a href=\"https://www.noip.com/client/linux/noip-duc-linux.tar.gz\">wget https://www.noip.com/client/linux/noip-duc-linux.tar.gz</a> -P /usr/local/src</p>\n</blockquote>\n<blockquote>\n<p>cd /usr/local/src</p>\n</blockquote>\n<blockquote>\n<p>tar xzf noip-duc-linux.tar.gz</p>\n</blockquote>\n<blockquote>\n<p>cd no-ip-2.1.9</p>\n</blockquote>\n<blockquote>\n<p>make</p>\n</blockquote>\n<blockquote>\n<p>make install</p>\n</blockquote>\n<p>Now you can create the configuration file using</p>\n<blockquote>\n<p>/usr/local/bin/noip2 -C</p>\n</blockquote>\n<p>Enter your username, password and hostname.</p>\n<p>Now launch the app:</p>\n<blockquote>\n<p>/usr/local/bin/noip2</p>\n</blockquote>\n<p>Make it launch at startup, create a service like the one we did earlier and put it in /etc/systemd/system/noip2.service</p>\n<p>I found one that works, a gist from Nathan Giesbrecht, so copy the bellow content and put it inside that file and then start and enable:</p>\n<blockquote>\n<p>nano /etc/systemd/system/noip2.service</p>\n</blockquote>\n<pre><code># Simple No-ip.com Dynamic DNS Updater\n#\n# By Nathan Giesbrecht (http://nathangiesbrecht.com)\n#\n# 1) Install binary as described in no-ip.com's source file (assuming results in /usr/local/bin)\n# 2) Run sudo /usr/local/bin/noip2 -C to generate configuration file\n# 3) Copy this file noip2.service to /etc/systemd/system/\n# 4) Execute `sudo systemctl daemon-reload`\n# 5) Execute `sudo systemctl enable noip2`\n# 6) Execute `sudo systemctl start noip2`\n#\n# systemd supports lots of fancy features, look here (and linked docs) for a full list:\n#   http://www.freedesktop.org/software/systemd/man/systemd.exec.html\n\n[Unit]\nDescription=No-ip.com dynamic IP address updater\nAfter=network.target\nAfter=syslog.target\n\n[Install]\nWantedBy=multi-user.target\nAlias=noip.service\n\n[Service]\n# Start main service\nExecStart=/usr/local/bin/noip2\nRestart=always\nType=forking\n</code></pre>\n<blockquote>\n<p>sudo systemctl start noip2</p>\n</blockquote>\n<blockquote>\n<p>sudo systemctl enable noip2</p>\n</blockquote>\n<p>All right, let’s go back to the noip dashboard. Click on DynamicDNS -&gt; No-IP Hostnames. You should see an update to the “Last Update” column and your External IP/Target beside it, greeaat! This look pretty cool. At this time, you already know what will happen. Test time! Go ahead and do the Hotspot thing we earlier did.</p>\n<p>Cool, now we have a fully functional Minecraft service. We learned about DynamicDNS, IP Forwarding, Linux Daemons and systemctl and a few Linux commands, this looks neat! Good job so far. You can already get comfortable now in your world.</p>\n<p>You can already start thinking on high availability. Now that you know when your computer restarts, your No-IP and Minecraft Server daemons will kick right in, you can go and tweak your motherboard settings. For example I set 2 things that help me in case of outage or server down, I set the “Boot when electricity comes back” and “WLAN (Wake On Lan)”, this is very nice for when you’re on vacation and your home loses electricity, your computer will boot right back when electricity comes back. the WLAN part is when I shutdown intentionally my PC knowing that no one will login (e.g everyone’s on vacation or something) and then I happen to need to turn my server back on, I just need to contact it and my motherboard will just turn on, notified by my network card that stays on. I don’t really use this feature because I really let my PC online 24/7, but it is still something cool to consider in some situations.</p>\n<h1 id=\"continuous-deployment-%E2%80%94-github-actions\">Continuous Deployment — GitHub Actions <a class=\"direct-link\" href=\"#continuous-deployment-%E2%80%94-github-actions\">#</a></h1>\n<p>Now, let’s use the tools we put in place so far into action (such unfunny puns).</p>\n<p>First, let’s make the command “sudo systemctl restart minecraft” not prompt us for a password, run:</p>\n<blockquote>\n<p>sudo visudo</p>\n</blockquote>\n<p>Add at the end of the file:</p>\n<blockquote>\n<p>yourusername ALL=(ALL) NOPASSWD: systemctl restart minecraft</p>\n</blockquote>\n<p>As you remember we cloned mineconf to the home directory of the server, that repository contains the pipeline for deployment. We will first need to create a repository and push that into it. Go ahead on Github and create a private repository, name it like you want, I suggest mineconf so you remember to come back to my repo once in a while and update your files!</p>\n<p>We also need to add your server SSH public key to your github account, this is needed for pulling the git changes without password prompt, for that you can fork from this tutorial and go ahead follow these steps: <a href=\"https://help.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account\">https://help.github.com/en/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account</a></p>\n<p>Okay, so now your repo is located at <a href=\"mailto:git@github.com\">git@github.com</a>:username/mineconf.git (change username with yours), let’s update the mineconf repo that we pulled earlier, run these commands to modify the remote url and push the repo content to it:</p>\n<blockquote>\n<p>cd ~/mineconf</p>\n</blockquote>\n<blockquote>\n<h1 id=\"replace-username-by-your-username-underneath\">replace username by your username underneath <a class=\"direct-link\" href=\"#replace-username-by-your-username-underneath\">#</a></h1>\n</blockquote>\n<blockquote>\n<p>git remote set-url origin <a href=\"mailto:git@github.com\">git@github.com</a>:username/mineconf.git</p>\n</blockquote>\n<blockquote>\n<p>git push</p>\n</blockquote>\n<p>Now, in the earlier steps, you created a pair ssh keys, copy the one inside ~/.ssh/id_rsa, which is your private key (Keep it private, it is VERY dangereous to share that) and put it inside the Github Secrets of your Repo, at the same time you should add the HOST (hostname you created in no-ip2) and your linux user username, here how it should look like:<br>\n<img src=\"/content/images/2020/05/image-21.png\" alt=\"\"><br>\nOuff, this was a lot to digest. Take your time understanding every step. Also it is very important to audit anything you get from open source, you can check and dig into the Actions I wrote, the services you copy pasted and so on.</p>\n<p>Let’s look at how they look on the time of writing this:</p>\n<pre><code>name: Minecraft Config CI/CD\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Test SSH Command\n      uses: appleboy/ssh-action@v0.0.7\n      with:\n        # Goes into your configuration files and gets the latest changes from github\n        script: cd ~/mineconf &amp;&amp; git stash &amp;&amp; git pull &amp;&amp; sudo systemctl restart minecraft &amp;&amp; ls -la\n        host: $\n        username: $\n        key: $\n</code></pre>\n<p>Here the “on” keyword means trigger on push and pull request on branch master, I only put one job which is a deployment and runs on an ubuntu machine, the first step checksout to our branch and the second step runs a command via SSH which goes into the mineconf folder, stashes the local changes, pulls the newest changes and restarts minecraft. I added ls -la to show a log on the github actions, helps with debugging etc.</p>\n<blockquote>\n<p>cd ~/mineconf &amp;&amp; git stash &amp;&amp; git pull &amp;&amp; sudo systemctl restart minecraft &amp;&amp; ls -la</p>\n</blockquote>\n<p>For now it is a fairly basic pipeline, I (or anyone, it’s open source) will eventually added tests (because I freaking love tests) and documentation, this will make the deployments more robust, if someone makes a typo and breaks the whitelist file, it will block at the test level. You can already imagine how limitless the options are!</p>\n<p>This is a typical pipeline that you would write with any tool like gitlab CI, Github Actions, Ansible, etc. They have different namings and stuff but it’s the same thing.<br>\n<img src=\"https://miro.medium.com/max/38/0*b_YRCmB33_3mdkwL?q=20\" alt=\"\">Them Pipelines man<br>\nNext, let’s activate them! Go to ~/mineconf and rename .github_ to .github (I have deactivated it on the public repository by adding a _ at the end)</p>\n<blockquote>\n<p>cd ~/mineconf</p>\n</blockquote>\n<blockquote>\n<p>mv .github_ .github</p>\n</blockquote>\n<p>Add these changes and push to your repo</p>\n<blockquote>\n<p>git add .github .github_</p>\n</blockquote>\n<blockquote>\n<p>git add whitelist.json</p>\n</blockquote>\n<p>git commit -m “Activated Github Actions and added User to whitelist.json”</p>\n<p>(whitelist.json keeps getting overrided by the Minecraft Server and messes up with the format, I usually just do a git stash when it’s the only change because I want to keep my json formatted correctly, but since it’s the first time we push it, add it to the repo to not lose the user you added)</p>\n<p>Now that should’ve automatically triggered the automated deployment. Go ahead into the github repository in the Actions Tab, it should look like this:<br>\n<img src=\"/content/images/2020/05/image-22.png\" alt=\"\"><br>\nI can see there that my brother updated the whitelist.json and his friend is now playing on our server, I should get more RAM.</p>\n<p>Now to finish up, we need to make a symlink for the server properties so you can play with it on Github, and the permissions.json. You can easily go ahead and remove the files that exist on the server and create the symlinks:</p>\n<blockquote>\n<p>rm /opt/minecraft/permissions.json /opt/minecraft/server.properties</p>\n</blockquote>\n<blockquote>\n<p>ln -s $HOME/mineconf/server.properties /opt/minecraft/server.properties</p>\n</blockquote>\n<blockquote>\n<p>ln -s $HOME/mineconf/permissions.json /opt/minecraft/permissions.json</p>\n</blockquote>\n<blockquote>\n<p>sudo systemctl restart minecraft</p>\n</blockquote>\n<p>There you go! You are ready to roll, now, if you need to add someone to your whitelist, you just need to add it directly from the online GitHub GUI. No need to bother with SSHing etc. That’s a good feeling, and that’s the feeling that every DevOps or Developer look for, things that took minutes, hours or days to accomplish, now takes 11 seconds.</p>\n<h1 id=\"conclusion\">Conclusion <a class=\"direct-link\" href=\"#conclusion\">#</a></h1>\n<p>Okay, we learned about running a server, changing file permissions, connecting, ssh keys, automated deployments, DynamicDNS, Port Forwarding. That pretty much covers the whole DevOps job thingy. You’re ready to go to that interview with confidence now, the day to day job doesn’t look very different to this, might get a bit more complicated sometimes but there’s always a simple solution.</p>\n<p>I hope you enjoyed your read and learned stuff along the way! Don’t hesitate leaving a comment if you find that I went too fast somewhere or need more clarifications or even if you just found a typo or a mistake!</p>\n",
      "date_published": "2020-03-30T00:00:00-04:00"
    },{
      "id": "https://serafdev.github.io/posts/2020-03-28-how-magit-improved-my-workflow/",
      "url": "https://serafdev.github.io/posts/2020-03-28-how-magit-improved-my-workflow/",
      "title": "How Magit improved my workflow",
      "content_html": "<p>As a software developer, git is the most important collaborative tool you have to use, mastering it is essential for anyone that collaborates in the code base.</p>\n<p>Your git repository probably broke so many times, you most certainly staged (git add) files (those database credentials) and had to google to find out how to un-stage them.</p>\n<p>I will cover some of these and let you explore more! I always wanted to showcase some of Magit, now that it is available for VSCode and not only on my editor, it is time for you too to do the switch, I can guarantee that it will be available for most editors sometime in this decade! (lol, I’m a patient man, a decade is nothing)</p>\n<hr>\n<h1 id=\"installation\">Installation <a class=\"direct-link\" href=\"#installation\">#</a></h1>\n<p>As from last month, VSCode users can get it on the marketplace, I will although go through this article using emacs with evil-mode, not that it matters, the only difference should be the keybindings, the workflow will be the same. I will still try to get the keybindings from VSCode when I can.</p>\n<p>For emacs users you can install it following the official guide here <a href=\"https://magit.vc/manual/magit/Installing-from-Melpa.html#Installing-from-Melpa\">https:/magit.vc/manual/magit/Installing-from-Melpa.html#Installing-from-Melpa</a>. If you use the spacemacs configuration you only need to add “magit” to your layers.</p>\n<hr>\n<p>Spoil alert, you can jump at the bottom of the page to look at the whole menu of Magit in my editor. It’s basically most git commands.</p>\n<p>I will here only cover git add, commit, remote, push.</p>\n<h1 id=\"git-add\">git add <a class=\"direct-link\" href=\"#git-add\">#</a></h1>\n<p>This is the basic process that all of us have to go through so many times, as simple as it is, you still have to remember what you’re adding, what were you working on, etc. So basically you often need to go through all the changes you made, make sure you didn’t forget any Printf or console.logs, so the first thing you do is a git status to look at what files were changed, and then a git diff to look at the changes made compared to the latest commit. If you find anything you need to remove or modify, you need to go inside that file and do your changes.</p>\n<p>Now that you’re done, you need to stage (git add) the files you want to commit, then commit and push. On a side note here, it is important to stage files carefully, I’ve seen people use the git add — all blindly. Don’t do that make sure you know exactly what you’re staging.</p>\n<p>Let’s now see how this process goes with Magit, first you need to open the “Magit Status” buffer, you can open the buffer by running the tool in your editor, or simply the keybinding for it.</p>\n<p>So I prepared some changes and I am ready for my next commit. I open the buffer (SPC+g+s for me):<br>\n<img src=\"/img/2020/05/image-20.png\" alt=\"\"><br>\nYou can see how cool already the Magit status buffer is already, you can see the Unstaged changes, the recent commits just under it and in the same windows you can still see the file you’re editing on top. In the same buffer we have git status and git log and the buffer is interactive! Let’s put our cursor on the line with “modified main.go” and click “TAB”.<br>\n<img src=\"/img/2020/05/image-19.png\" alt=\"\"><br>\nNoice. So that’s the change I made, okay, so now in the same buffer we also have a git diff and I can easily stage only parts of a file, each part has a pink header here. Hmm, I don’t like the first part, I will have to remove that x it seems like it got there unintentionally, but the other part looks great.</p>\n<p>I will point on the “package mainx” part and click “x” for Discard, then I will point on the Println modification and click “s” for Stage:<br>\n<img src=\"/img/2020/05/image-18.png\" alt=\"\"><br>\nOk, now we have our first hunk discarded and the Println modification is Staged, we can see that it is now in the Staged section. If you want to unstage, you can just unstaged it back by click on “u”.</p>\n<p>You can also click enter in any part of the Unstagged, Untracked and Staged hunks to open them and modify them.</p>\n<h1 id=\"git-commit\">git commit <a class=\"direct-link\" href=\"#git-commit\">#</a></h1>\n<p>We are now ready to commit. So I simply click “c” for commit:<br>\n<img src=\"/img/2020/05/image-17.png\" alt=\"\"><br>\nWait, what? I did not know the existence of all those arguments before using Magit, I always had to go to stackoverflow and search for “How to override the author? How to Fixup? How to squash? Can I make this verbose? How to reset the author when amending?” Welp, no more. So let’s keep this simple, I just want to commit. I will click “c” again as shown in the bottom legend.<br>\n<img src=\"/img/2020/05/image-16.png\" alt=\"\"><br>\nWe now have 2 buffers open, one for the commit message and one with the details of all the changes made, this is so helpful when writing a commit message (and keeps giving you visibility in case you forgot something).</p>\n<p>I will write a message and save my commit with “CTRL+C CTRL+C”.<br>\n<img src=\"/img/2020/05/image-15.png\" alt=\"\"><br>\nBefore pushing our changes, we can see the line “Head: master Second Commit” but there is no line for “Push”, that is because we do not have a remote repository.</p>\n<h1 id=\"git-remote\">git remote <a class=\"direct-link\" href=\"#git-remote\">#</a></h1>\n<p>Let’s add the remote repository, press M for reMote (lol)<br>\n<img src=\"/img/2020/05/image-14.png\" alt=\"\"><br>\nThen “a” to Add a remote branch:<br>\n<img src=\"/img/2020/05/image-13.png\" alt=\"\"><br>\nAfter writing the Remote name (I named is “origin” as per the convention) press Enter:<br>\n<img src=\"/img/2020/05/image-12.png\" alt=\"\"><br>\nNow set the url and click enter (You can put an ssh-style url too):<br>\n<img src=\"/img/2020/05/image-11.png\" alt=\"\"><br>\nFinally press y for setting “remote.pushDefault” to “origin”:<br>\n<img src=\"/img/2020/05/image-10.png\" alt=\"\"><br>\nNow you can see the second line appear, saying “Push: origin/master does not exist”. The “does not exist” part is because our remote branch is empty.</p>\n<h1 id=\"git-push\">git push <a class=\"direct-link\" href=\"#git-push\">#</a></h1>\n<p>We are now ready to push, I will simply press on “P” (capital P, aka Shift+P):<br>\n<img src=\"/img/2020/05/image-9.png\" alt=\"\"><br>\nThis view gives me many options, the one that I will focus on is the “Push master to” section, you still can quickly skim on the other parts to see that it gives you also the option to push another branch or tag while staying on the current branch. There’s also the usual arguments which are fairly simple for the “git push” command.</p>\n<p>Let’s look at the line with the “p” command, saying that if we push it will push to origin/master, it will also create the remote branch for us. Let’s do that:<br>\n<img src=\"/img/2020/05/image-8.png\" alt=\"\"><br>\nIt prompts me for my username and password (If you usually do this process with an ssh key it wouldn’t prompt anything):<br>\n<img src=\"/img/2020/05/image-7.png\" alt=\"\"><br>\nThe “Push:” line changed, the latest commit on origin/master is now “Second Commit” and we are done with our day-to-day work.</p>\n<h1 id=\"magit-commands\">Magit Commands <a class=\"direct-link\" href=\"#magit-commands\">#</a></h1>\n<p>Here’s a simple screenshot with all commands available, in the Magit Status buffer, click “h”:<br>\n<img src=\"/img/2020/05/image-6.png\" alt=\"\"><br>\nI find this very interesting because it shows me many commands that I usually don’t use and I should use more, and many commands that I didn’t know existed, it is easy to click on any of them to look at the details and look at what they do. In the beginnings this buffer is your best friend, in no time all these commands will become automatic.</p>\n<h1 id=\"the-end.\">The End. <a class=\"direct-link\" href=\"#the-end.\">#</a></h1>\n<p>It looked pretty long (and felt pretty long to me because I had to do screenshots), but when you get used to the keybindings, this whole process shouldn’t take more than 15 seconds + Writing commit time (assuming that you are only adding 1 change and don’t have to go through your files during add). Here’s a full recap to show how quick things can go:</p>\n<p>git status: SPC g s</p>\n<p>git add: s for stage, u for unstage, x for discard</p>\n<p>git commit: c c for commit, c a for commit amend, ctrl c ctrl c to save commit.</p>\n<p>git push: P p</p>\n<p>Other great things that I did not cover here are Squash and Fixups that I use very often now that I have Magit, I used to be scared of these but with visibility this tool gives me, it is so simple and quick to use. Also merges and Fixing conflicts is very easy because of this “Magit Status” buffer that shows the conflicts and let’s me directly jump into them.</p>\n<p>I know there is many GUI tools that helps you with your git process, but those makes you forget what you can or can’t do with git, this let’s me still interact with git the same as I would from the command line.</p>\n<p>I hope this was useful for you. If you want me to cover anything else, let me know bellow in the comments!</p>\n<p>Happy Magiting!</p>\n",
      "date_published": "2020-03-28T00:00:00-04:00"
    },{
      "id": "https://serafdev.github.io/posts/2020-02-20-a-guide-to-running-a-node-js-live-server-in-docker-react-js-example/",
      "url": "https://serafdev.github.io/posts/2020-02-20-a-guide-to-running-a-node-js-live-server-in-docker-react-js-example/",
      "title": "A Guide to running a node.js live server in Docker (react.js example)",
      "content_html": "<p>The real TL;DR, clone the repo, run the example, then jump to the Build and Run section:</p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/serafdev/livemount-react-app\">https://github.com/serafdev/livemount-react-app</a> react-app &amp;&amp; cd react-app</p>\n</blockquote>\n<p><strong>Setup the development environment</strong></p>\n<p>Create a new React project if you don’t already have one:</p>\n<blockquote>\n<p>npx create-react-app react-app &amp;&amp; cd react-app</p>\n</blockquote>\n<p>Put a file on the root of the project named <a href=\"http://docker-entrypoint.sh\">docker-entrypoint.sh</a> with content:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span><br><br><span class=\"token keyword\">case</span> <span class=\"token variable\">$1</span> <span class=\"token keyword\">in</span><br>    dev<span class=\"token punctuation\">)</span><br>        <span class=\"token function\">yarn</span><br>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Running development server on 0.0.0.0:3000..\"</span><br>        <span class=\"token function\">yarn</span> start<br>        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><br>    <span class=\"token builtin class-name\">test</span><span class=\"token punctuation\">)</span><br>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Running tests..\"</span><br>        <span class=\"token function\">yarn</span> <span class=\"token builtin class-name\">test</span><br>        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">sh</span><span class=\"token punctuation\">)</span><br>        /bin/sh<br>        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">esac</span></code></pre>\n<p>Another file named Dockerfile with this content:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">FROM node:lts-alpine<br>ENV HOST <span class=\"token number\">0.0</span>.0.0<br><br>WORKDIR /app<br><br>COPY package.json /app<br>COPY docker-entrypoint.sh /docker-entrypoint.sh<br><br>RUN <span class=\"token function\">chmod</span> +x /docker-entrypoint.sh<br>ENTRYPOINT <span class=\"token punctuation\">[</span><span class=\"token string\">\"docker-entrypoint.sh\"</span>, <span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">]</span></code></pre>\n<h4 id=\"build-and-run!\">Build and run! <a class=\"direct-link\" href=\"#build-and-run!\">#</a></h4>\n<p>You’re ready to test! Run your docker command to build the image:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker build <span class=\"token builtin class-name\">.</span> -t react-app:local</code></pre>\n<p>Now you can run it by mounting your code to the machine and exposing the node port to your host:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker run -v <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">)</span></span>:/app -p <span class=\"token number\">3000</span>:3000 react-app:local</code></pre>\n<p>Visit the url on your browser: localhost:3000, you should be able to see the React default page</p>\n<h4 id=\"test-reloading\">Test Reloading <a class=\"direct-link\" href=\"#test-reloading\">#</a></h4>\n<p>Now let’s modify some code and reload the page, open src/App.js with your favourite editor and modify the content of the <p></p> dom to: Noice (or anything, really). Now if you reload you should have:<br>\n<img src=\"/content/images/2020/05/image-1.png\" alt=\"\">Just noice.<br>\nA more detailed article will be coming soon. If you have issues or find difficulties, do not hesitate leaving a comment.</p>\n<p>Happy hot-reloading!</p>\n",
      "date_published": "2020-02-20T00:00:00-05:00"
    },{
      "id": "https://serafdev.github.io/posts/2019-10-13-Kubernetes-configuration-with-backend-and-frontend/",
      "url": "https://serafdev.github.io/posts/2019-10-13-Kubernetes-configuration-with-backend-and-frontend/",
      "title": "Kubernetes configuration with a backend + frontend setup",
      "content_html": "<h4 id=\"the-app\">The app <a class=\"direct-link\" href=\"#the-app\">#</a></h4>\n<p>First, the setup of my application is pretty small and simple: I have a backend that connects to a traditional database and a static frontend that sends requests to the backend endpoints. The database has it's own cloud-managed cluster and will not be part of the Kubernetes deployments, although, the machines are in the same private network since you should never expose a database publicly.</p>\n<h3 id=\"the-registry\">The registry <a class=\"direct-link\" href=\"#the-registry\">#</a></h3>\n<p>For my design, I have for now a standalone machine that I called <code>ops</code> for operations and it contains my docker registry where I push my images. I also have my jenkins on the same machine.</p>\n<p>Both run on docker, for registry you simply need to do:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker pull registry<br>docker run -d -p <span class=\"token number\">5000</span>:5000 --restart always --name registry registry:2</code></pre>\n<p>This will pull the official registry image from the docker hub, then we will run it in daemon mode on port 5000.</p>\n<p>You now have a registry running!</p>\n<p>Now let's put the images on it. Let's do it manually for now.</p>\n<p>First, I pulled my <code>backend</code> and <code>frontend</code> code to the <code>ops</code> machine, then simply doing:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/backend<br>docker build <span class=\"token builtin class-name\">.</span> -t backend<br>docker tag backend localhost:5000/backend<br>docker push localhost:5000/backend</code></pre>\n<p>Will build the docker image and push it to the registry. Now it should be accessible from our kubernetes deployments. Make sure that your <code>ops</code> machine is on the same network as your kubernetes cluster. You can do the same with the <code>frontend</code>, it is exactly the same commands</p>\n<p>Personally, I am going to remove the <code>ops</code> machine and just run the docker registry as a service on the kubernetes cluster, with no external IP. That way I can save money on machines and make it simpler (no physical machines to take care of, just Kubernetes <code>YAML</code> files). To solve the problem of saving images, you can add the configuration to save your images to your cloud provider's storage (<code>Google Cloud Storage</code> in my case), or volumes will do just fine. Jenkins can also easily put on the Kubernetes cluster using a volume (With declarative pipelines you won't even need to back up your jenkins volume, it's stateless anyway! Important things to consider on your design).</p>\n<h3 id=\"the-kubernetes-deployments\">The Kubernetes Deployments <a class=\"direct-link\" href=\"#the-kubernetes-deployments\">#</a></h3>\n<p>The apps were named <code>backend</code> and <code>frontend</code> for simplicity reasons. Now, for the backend deployment:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1<br><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment<br><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backend<br><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><br>  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> backend<br>  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span><br>        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> backend<br>    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backend<br>        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> ops<span class=\"token punctuation\">:</span>5000/backend<br>        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span><br>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8000</span></code></pre>\n<p>The metadata <code>name</code> is <code>backend</code>, pretty unimportant, I usually put the same number of replicas as the number of machines, I find it unuseful to put more since my backend apps are already designed for multithreading, now the important part is the selector, to be able to add a pointer to this deployment, your service needs to know how to find it, in kubernetes cluster we use selectors. so here if we match the label app=backend, it will redirect the service request to this deployment, you can have multiple deployments having the same matchLabel, reason you would do this is maybe A-B testing with different technologies but don't want to mix the Deployments (e.g an app written in Python and rewritten in C++ to test the performance, using the same service and 2 deployments would work just fine!). It's important for me to keep every part as lean as possible, mixing everything together is a pain in the ass to debug.</p>\n<p>Now, for the specs of the <code>Deployment</code>, we have the image that we uploaded earlier to our registry (the machine name is <code>ops</code>, don't mix in IP addresses, you don't want to start managing that too) on <code>port 5000</code>, the image name is just <code>backend</code>, so <code>ops:5000/backend</code>. Done! You have your simple <code>Deployment</code>.</p>\n<p>I will paste the frontend one, but it is exactly the same, minus the port:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1<br><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment<br><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> frontend<br><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><br>  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> frontend<br>  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span><br>        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> frontend<br>    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> frontend<br>        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> ops<span class=\"token punctuation\">:</span>5000/frontend<br>        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span><br>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></code></pre>\n<p>To deploy these, you need to use <code>kubectl</code> and connect your <code>kubectl</code> to your cluster, so it knows where to execute the commands, I use cloud so usually if you go to your <code>Cluster</code> panel it will tell you what command to run to do this.</p>\n<p>To create a <code>Deployment</code>, copy the backend deployment <code>YAML</code> configuration above to <code>backend-deployment.yaml</code> and simply run (ditto for <code>frontend</code>):</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl create -f backend-deployment.yaml</code></pre>\n<h3 id=\"the-kubernetes-services\">The Kubernetes Services <a class=\"direct-link\" href=\"#the-kubernetes-services\">#</a></h3>\n<p>Now that we have deployments, you can do nothing with them, you need to expose them to the external world, here's the backend <code>Service</code>:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1<br><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service<br><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backend<br><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> LoadBalancer<br>  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> backend<br>  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span><br>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP<br>      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8000</span><br>      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8000</span></code></pre>\n<p>What I like from this, is it pretty easy to read and understand, first we have the <code>metadata</code>, the name of your <code>Service</code>, I like using the same <code>metadata</code> as the <code>Deployment</code> when it is a simple architecture like this (1:1). Second, there's the <code>specs</code>, for a Load Balancer, we simply put <code>type: LoadBalancer</code> (so your orchestrator assigns an external IP), then we have the selector, for us it is simply <code>app: backend</code> since if you remember correctly in the <code>Deployment</code> we put <code>matchLabels: {app: backend}</code>. For the ports, I put <code>TCP</code> because it's the default one and it's irrelvant to me for now but you could use anything you want. The port I'm exposing my <code>Service</code> on is <code>port: 8000</code>, and the target port on the <code>Deployment</code> is also <code>targetPort: 8000</code>. You could change this for e.g if your frontend deployment runs on <code>8080</code> you could do something like this:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP<br>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span><br>  <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span></code></pre>\n<p>You can also have multiple ports exposed on the same <code>Service</code>, e.g your <code>frontend</code> usually runs on 80 and 443.</p>\n<p>I will also paste the <code>frontend Service</code> here but there's nothing special about it:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1<br><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service<br><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> frontend<br><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> LoadBalancer<br>  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> frontend<br>  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span><br>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP<br>      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span><br>      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></code></pre>\n<p>To create a service, you just need to use the same command as the deploment:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl create -f frontend-service.yaml</code></pre>\n<p>I think it's the same command to create any object in the Orchestrator.</p>\n<h3 id=\"ok%2C-done\">Ok, done <a class=\"direct-link\" href=\"#ok%2C-done\">#</a></h3>\n<p>Hope you enjoyed this article and everything worked for you. If you find an issue in this article, a step missing, or just something unclear, please do not hesitate opening one on my <a href=\"https://github.com/serafss2/serafss2.github.io\">serafss2.github.io</a> repo!</p>\n<p>You could also contribute with spelling or typo fixes! I'm writting this on <code>emacs</code>, I don't know if there's a spelling pluging, but probably.</p>\n",
      "date_published": "2019-10-13T00:00:00-04:00"
    },{
      "id": "https://serafdev.github.io/posts/2019-10-05-Gunicorn-WSGI-Dockerfile/",
      "url": "https://serafdev.github.io/posts/2019-10-05-Gunicorn-WSGI-Dockerfile/",
      "title": "Gunicorn WSGI Dockerfile (Python webserver)",
      "content_html": "<h3 id=\"write-the-dockerfile\">Write the Dockerfile <a class=\"direct-link\" href=\"#write-the-dockerfile\">#</a></h3>\n<p>First, I really love using alpine linux for all my docker images, when testing my containers,<br>\nthey most of the time only take a few megabytes of space. For the version, I have nothing special running linux related so always<br>\nkeeping latest is allright (by not specifying any version for the alpine part). For Python, we're currently at 3.7.4, by putting 3.7<br>\nyou ensure your docker image to always have those minor updates (latest of 3.7).</p>\n<p>In my app, I needed some libraries that required compiling and cryptography libraries, so I added gcc,<br>\nlibc-dev, libressl-dev and libffi-dev.</p>\n<p>For the rest it's just the normal python commands to install packages using pip.</p>\n<pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> python<span class=\"token punctuation\">:</span>3.7<span class=\"token punctuation\">-</span>alpine<br><br><span class=\"token keyword\">RUN</span> apk add gcc libc<span class=\"token punctuation\">-</span>dev libffi<span class=\"token punctuation\">-</span>dev libressl<span class=\"token punctuation\">-</span>dev<br><br><span class=\"token keyword\">WORKDIR</span> /app<br><br><span class=\"token keyword\">COPY</span> requirements.txt /app/requirements.txt<br><span class=\"token keyword\">RUN</span> pip install <span class=\"token punctuation\">-</span>r requirements.txt<br><br><span class=\"token keyword\">COPY</span> . /app<br><br><span class=\"token keyword\">EXPOSE</span> 8000<br><br><span class=\"token keyword\">CMD</span> gunicorn <span class=\"token punctuation\">-</span>b 0.0.0.0<span class=\"token punctuation\">:</span>8000 app.wsgi</code></pre>\n<h3 id=\"build-the-docker-image\">Build the docker image <a class=\"direct-link\" href=\"#build-the-docker-image\">#</a></h3>\n<p>To build the docker image you can simply run the build command in the right directory:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker build <span class=\"token builtin class-name\">.</span> -t your-django-app</code></pre>\n<h3 id=\"run-the-app\">Run the app <a class=\"direct-link\" href=\"#run-the-app\">#</a></h3>\n<p>Since we exposed our gunicorn app on port 8000, we need to publish (-p) our container port to one of the host ports,<br>\nhere I'll be chosing 8000 for simplicity, so in daemon mode (-d):</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker run -d -p <span class=\"token number\">8000</span>:8000 your-django-app</code></pre>\n",
      "date_published": "2019-10-05T00:00:00-04:00"
    },{
      "id": "https://serafdev.github.io/posts/2019-05-01-Generate-a-csr-key-pair-with-openssl/",
      "url": "https://serafdev.github.io/posts/2019-05-01-Generate-a-csr-key-pair-with-openssl/",
      "title": "Generate a CSR/Key pair with openssl (linux)",
      "content_html": "<h4 id=\"command\">Command <a class=\"direct-link\" href=\"#command\">#</a></h4>\n<pre class=\"language-bash\"><code class=\"language-bash\">openssl req -new -newkey rsa:2048 -nodes -keyout faresbessrour.com.key -out faresbessrour.com.csr</code></pre>\n<p>That will create a key <code>faresbessrour.com.key</code> and a csr <code>faresbessrour.com.csr</code>, make sure you backup the key somewhere secure and you can use the CSR to get a certificate from a CA, then you can throw it. The CRT part that you will get is the public part so it is not as important.</p>\n<h4 id=\"footnote\">Footnote <a class=\"direct-link\" href=\"#footnote\">#</a></h4>\n<p>The most important part is the CN, it should be your url or your machine name, the rest is just whatever I think, but it's still good to put the correct information if you will deploy to production, else for local testing you can skip those questions, but I'm not sure</p>\n",
      "date_published": "2019-05-01T00:00:00-04:00"
    },{
      "id": "https://serafdev.github.io/posts/2019-03-11-Deploy-an-nginx-server/",
      "url": "https://serafdev.github.io/posts/2019-03-11-Deploy-an-nginx-server/",
      "title": "Deploy an nginx server",
      "content_html": "<h3 id=\"deploy-an-nginx-server\">Deploy an nginx server <a class=\"direct-link\" href=\"#deploy-an-nginx-server\">#</a></h3>\n<p>I'll show you in this guide how to deploy an nginx server with detailed explanation on what's happening. This guide is for unix environments, I will do it on an ubuntu machine but it should be almost the same on any machine if you understand what's going on.</p>\n<h4 id=\"install-nginx\">Install nginx <a class=\"direct-link\" href=\"#install-nginx\">#</a></h4>\n<p>First you will need to install nginx,</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> nginx</code></pre>\n<h4 id=\"verify-installation\">Verify installation <a class=\"direct-link\" href=\"#verify-installation\">#</a></h4>\n<p>First multiple things might happened depending on your platform, to verify the installation we first need to check the nginx file and look how it is behaving on your machine, so go check your <code>nginx.conf</code> file:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> /etc/nginx/nginx.conf</code></pre>\n<p>You should find under the http tag either a <code>server</code> tag or one ore multiple includes which will take care to include servers from other files. For example in my case I found these 2 lines but no <code>server</code> tag (might be different for you):</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">include /etc/nginx/conf.d/*.conf<span class=\"token punctuation\">;</span><br>include /etc/nginx/sites-enabled/*<span class=\"token punctuation\">;</span></code></pre>\n<p>If you found a <code>server</code> tag, then good you can check the port it's listening to with the listen parameter:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">    listen <span class=\"token number\">80</span> default_server<span class=\"token punctuation\">;</span></code></pre>\n<p>If not, we can look inside the folders included (<code>/etc/nginx/conf.d/</code> and <code>/etc/nginx/sites-enabled/</code>). I found mine in <code>/etc/nginx/sites-enabled/default</code> (which is a simlink but I won't cover that in this tutorial because it used to confuse me at first and I want to keep this simple.)</p>\n<p>So I look inside it</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> /etc/nginx/sites-enabled/default<br><br><span class=\"token punctuation\">..</span>.<br>    listen <span class=\"token number\">80</span> default_server<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">..</span>.</code></pre>\n<p>Now to verify if everything worked correctly you can run your nginx application which will load the default files for you:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">/etc/init.d/nginx start<br><br>or<br><br>systemctl start nginx</code></pre>\n<p>Go to your browser and type <code>localhost:80</code>, (or the default port for you) you should find that &quot;Welcome to nginx!&quot; page. If you're on a server you can do <code>curl http://localhost:80</code></p>\n<p>Okay, now we know nginx is working, whatever breaks after should be in our configuration file and not in our installation.</p>\n<h4 id=\"let's-make-our-own-simple-configuration-from-scratch-(for-a-static-web-site)\">Let's make our own simple configuration from scratch (for a static web site) <a class=\"direct-link\" href=\"#let's-make-our-own-simple-configuration-from-scratch-(for-a-static-web-site)\">#</a></h4>\n<p>First, let's make a simple page that does nothing, create a file named <code>index.html</code> inside <code>/var/www/html/my_website/</code>, you can copy paste these 2 lines:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> /var/www/html/my_website<br><span class=\"token function\">sudo</span> <span class=\"token function\">touch</span> /var/www/html/my_website/index.html</code></pre>\n<p>Add some content to the file you just created, you can use whatever editor you like to open it and put this content in it (You can write an actual html file but I'll just write one line):</p>\n<p>To open the file run this command (replace emacs with whatever editor you like, e,g: nano, gedit, vim):</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">emacs /var/www/html/my_website/index.html</code></pre>\n<pre class=\"language-html\"><code class=\"language-html\">What's up doge;</code></pre>\n<p>Second, make sure you got this line in your <code>/etc/nginx/nginx.conf</code>:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">\tinclude /etc/nginx/conf.d/*.conf<span class=\"token punctuation\">;</span></code></pre>\n<p>It indicates to nginx to include every configuration file that finishes with <code>.conf</code> inside the folder <code>conf.d/</code>.</p>\n<p>Now let's clean our default configurations in there by removing the default server we found earlier (either directly inside <code>nginx.conf</code> or a standalone file inside <code>conf.d/</code> or <code>sites-enabled/</code>), in the case of standalone files you can delete the file or move it to your home directory if you want to play with it later, otherwise you can comment out the whole <code>server { ... }</code> bloc (by adding a <code>#</code> in the beginning)</p>\n<p>Let's restart nginx with <code>systemctl restart nginx</code> or <code>/etc/init.d/nginx restart</code>, clean cache and head to <code>localhost:80</code> (or the port you found earlier). It shouldn't show the nginx welcome page anymore.</p>\n<p>Now let's create our new configuration file for the fully functional website we just created:</p>\n<p>Create a new nginx configuration file inside <code>/etc/nginx/conf.d/</code></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">touch</span> /etc/nginx/conf.d/my_website.conf</code></pre>\n<p>Let's add this content to it by opening the file (<code>sudo emacs /etc/nginx/conf.d/my_website.conf</code>) and copy pasting the next snippet:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">server <span class=\"token punctuation\">{</span><br>    listen <span class=\"token number\">8081</span><span class=\"token punctuation\">;</span><br>    server_name localhost<span class=\"token punctuation\">;</span><br><br>    root /var/www/html/my_website<span class=\"token punctuation\">;</span><br>    index index.html<span class=\"token punctuation\">;</span><br><br>    location / <span class=\"token punctuation\">{</span><br>        try_files <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span>/ <span class=\"token operator\">=</span><span class=\"token number\">404</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Now if you head to your browser at the url <code>localhost:8081</code>, you can see <code>What's up</code> on the page.</p>\n<p>Congratulation, you just deployed a website behind an nginx layer.</p>\n<h4 id=\"nginx-as-a-reverse-proxy\">Nginx as a reverse proxy <a class=\"direct-link\" href=\"#nginx-as-a-reverse-proxy\">#</a></h4>\n<p>For the ones that want to use nginx as a reverse proxy, the base configuration is simpler:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">server <span class=\"token punctuation\">{</span><br>    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span><br>    server_name localhost<span class=\"token punctuation\">;</span><br><br>    location / <span class=\"token punctuation\">{</span><br>        proxy_pass http://localhost:8080<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>This will pass all requests from the client on http to your server listening to port <code>8080</code>.</p>\n<p>If you want to add <code>https</code> with a redirect from <code>http</code> to <code>https</code>, this applies if you can :</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">server <span class=\"token punctuation\">{</span><br>    listen <span class=\"token number\">443</span> ssl<span class=\"token punctuation\">;</span><br>    server_name _<span class=\"token punctuation\">;</span><br>    ssl_certificate /etc/nginx/conf.d/ssl/ssl.crt<span class=\"token punctuation\">;</span><br>    ssl_certificate_key /etc/nginx/conf.d/ssl/ssl.key<span class=\"token punctuation\">;</span><br><br>    location / <span class=\"token punctuation\">{</span><br>        proxy_pass http://localhost:8080<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br>server <span class=\"token punctuation\">{</span><br>    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span><br>    listen <span class=\"token punctuation\">[</span>::<span class=\"token punctuation\">]</span>:80<span class=\"token punctuation\">;</span><br>    server_name _<span class=\"token punctuation\">;</span><br>    <span class=\"token builtin class-name\">return</span> <span class=\"token number\">301</span> https://<span class=\"token variable\">$host</span><span class=\"token variable\">$request_uri</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>NOTE: Replacing <code>server_name _;</code> with <code>server_name your_domain.com;</code> (a.k.a <code>server_name faresbessrour.com;</code> in my case) is not a bad idea. You can host many servers on the same machine.</p>\n<p>Okay, thanx for reading! Hope this helped you.</p>\n<p>If you have any comments, some step was ambiguous or any suggestions to fix or make this post better, please open an <a href=\"https://github.com/serafss2/serafss2.github.io/issues\">issue</a>, I will be glad to hear from you!</p>\n",
      "date_published": "2019-03-11T00:00:00-04:00"
    },{
      "id": "https://serafdev.github.io/posts/2019-03-09-Things-I-wish-I-could-add-to-python/",
      "url": "https://serafdev.github.io/posts/2019-03-09-Things-I-wish-I-could-add-to-python/",
      "title": "Things I wish(ed) I could add to Python",
      "content_html": "<h3 id=\"things-i-wish-i-could-add-to-python\">Things I wish I could add to Python <a class=\"direct-link\" href=\"#things-i-wish-i-could-add-to-python\">#</a></h3>\n<p>For some background, I've been a Scala developer for 2 years and if there's something I wish I could port in other languages are the berserk mode collections.</p>\n<p>For example if you get some data from an external source and have to do some modification, even complex and long, you could do it in one line elegantly and it will still be very readable, for e.g, if we receive some mapping between unimportant strings with some integer list as values, and we only want to get all the unique integers in a list and then only collect what is even, we could do something like this:</p>\n<pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> someData<span class=\"token operator\">:</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"yes\"</span> <span class=\"token operator\">-></span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no\"</span> <span class=\"token operator\">-></span> List<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>someData<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">.</span>distinct<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br><br><span class=\"token operator\">></span> List<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></code></pre>\n<p>This looks pretty nice and concise, and very easy to read. Every function speaks from itself, first we do a flatMap (So a map that will flatten one level of the collection, e.g: <code>[[1, 2, 3], [3, 4, 5]] =&gt; [1, 2, 3, 3, 4, 5]</code>). Then distinct, takes distinct values and finally a filter which verifies if each element is an even number.</p>\n<p>Now, we absolutely can do this in python, also in a one liner like this:</p>\n<pre class=\"language-python\"><code class=\"language-python\">some_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>y <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> some_data<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> v <span class=\"token keyword\">if</span> y <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><br><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code></pre>\n<p>This does almost the same thing, but is not as easy to read. First we flatten the values of the dictionary with <code>[y for v in some_data.values() for y in v]</code>. Then we can use <code>set</code> to discard duplicates (A set in python is just a hashset, so the <code>&quot;keys&quot;</code> must be unique). Then we can just add a simple filter in the first part to check if the numbers we are adding are even: <code>if y % 2 == 0</code>.</p>\n<p>On a side note, it took me time to understand how flattening works in python, these one liners are pretty satisfying but I try to avoid them in production because I don't want whoever debugging to come hunt me while I'm sleeping.</p>\n<h5 id=\"added-functions-to-list\">Added functions to list <a class=\"direct-link\" href=\"#added-functions-to-list\">#</a></h5>\n<p>So my point is, even if I find python a pretty complete language, I still though these cool collection functions could improve readability. So I just wanted to try to extend the <code>list</code> class to add a few functional functions:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">list_</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br><br>    <span class=\"token keyword\">def</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">return</span> list_<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">def</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">return</span> list_<span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">def</span> <span class=\"token function\">flat_map</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">return</span> list_<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>x <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> self <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">def</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>flat_map<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">def</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">return</span> list_<span class=\"token punctuation\">(</span><span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">def</span> <span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">return</span> list_<span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Now we have some cool built-in functions to our new type <code>list_</code>, we can also chain them since each of them returns a new instance of the type <code>list_</code> which respects the functional paradigm and makes it easier to read and debug.</p>\n<p>Let's try to do some complex chain:</p>\n<pre class=\"language-python\"><code class=\"language-python\">list_<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flat_map<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>distinct<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">]</span></code></pre>\n<p>This is definitely easier to read, we know that we have a nested list and we flatten it while &quot;squaring&quot; each value, then taking only even numbers but only keeping distinct ones.</p>\n<p>If we go to the first example we would have:</p>\n<pre class=\"language-python\"><code class=\"language-python\">some_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"yes\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><br>list_<span class=\"token punctuation\">(</span>some_data<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>distinct<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code></pre>\n<p>Which reads to: take values, flatten them, take distincts and filter them.</p>\n<p>I did all these examples by extending <code>list</code> but I tried this with <code>tuple</code> and it also works. I guess any collection could inherit from these functions with minor changes, I think it would be great to see these in a future Python release.</p>\n<p>Hope you liked this read, if you have any suggestions or ways to improve this article, do not hesitate opening an <a href=\"https://github.com/serafss2/serafss2.github.io/issues\">issue</a>.</p>\n<p>Happy Pythoning!</p>\n<p>P.S: I wanted to play with the <code>CPython</code> compiler but couldn't find how to add functions to the <code>iterables</code> class. I wish to open a PEP suggestion after playing a little bit with the compiler and testing performance, if you have any experience about this I would love to talk with you and get some of your advice.</p>\n",
      "date_published": "2019-03-09T00:00:00-05:00"
    },{
      "id": "https://serafdev.github.io/posts/2019-02-17-Django-filtering-with-query-parameters/",
      "url": "https://serafdev.github.io/posts/2019-02-17-Django-filtering-with-query-parameters/",
      "title": "Django Filtering",
      "content_html": "<!-- layout: post -->\n<!-- title: Django filtering with query parameters -->\n<!-- date: 2019-02-17 07:24 -->\n<!-- summary: A way to add a generic optional filtering to Django /GET request, e.g /GET /items?name__startswith=Graph -->\n<!-- categories: webdev python django -->\n<!-- layout: layouts/post.njk -->\n<!-- tags: -->\n<!--   - django  -->\n<!--   - api -->\n<h4 id=\"problem\">Problem <a class=\"direct-link\" href=\"#problem\">#</a></h4>\n<p>If you make a webapp, you will need someday or another to give filtering options to your frontend coworkers. In Django it is pretty simple to add filtering to a <code>query_set: e.g (Item.objects.filter(name='Graphic Card'))</code></p>\n<p>Although, I found optional filtering was annoying, I could've used the <code>Item.objects.filter(name__startswith='')</code> when there's no filter given but this is not nice because if you have 10 different filters you will still need to handle integers and pass all the filters even the empty ones to your query.</p>\n<h4 id=\"solution\">Solution <a class=\"direct-link\" href=\"#solution\">#</a></h4>\n<p>Let's handle the use case of a <code>/GET /items?name__startswith=Grap&amp;price_gte=300&amp;price__lte=700</code> which should return all items that start with <code>Grap</code> and price range from <code>300</code> and <code>700</code></p>\n<p>So your request will trigger the viewset <code>ItemViewSet</code> which contains the default function <code>list</code> which returns the the elements in <code>self.get_queryset()</code> which the default is all elements (At least for me when I generated the sample ViewSet)</p>\n<p>Here's what I found:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListModelMixin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    <span class=\"token triple-quoted-string string\">\"\"\"<br>    List a queryset.<br>    \"\"\"</span><br>    <span class=\"token keyword\">def</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        queryset <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>filter_queryset<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>get_queryset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><br>        serializer <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_serializer<span class=\"token punctuation\">(</span>queryset<span class=\"token punctuation\">,</span> many<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></code></pre>\n<p>To modify the behaviour we need to override the <code>get_queryset()</code>, I am not sure if we should override the <code>def list()</code> function but it looked to me that if I did that, the <code>get_queryset()</code> will return everything and then we filter in the backend, which I don't want.</p>\n<p>Now back to our sheeps, to make our URL work we can make a function that will dynamically generate our query parameters like this:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Q<br><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><br><br><br><span class=\"token comment\"># `/GET /items?name__startswith=Grap&amp;price_gte=300&amp;price__lte=700`</span><br><span class=\"token keyword\">def</span> <span class=\"token function\">get_queryset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br><br>    filters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token string\">'name__startswith'</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'name__startswith '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                <span class=\"token string\">'price__gte'</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'price_gte '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                <span class=\"token string\">'price__lte'</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'price__lte'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>              <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">def</span> <span class=\"token function\">queries</span><span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>Q<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span><span class=\"token punctuation\">{</span>k<span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> filters<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> v<span class=\"token punctuation\">]</span><br><br>    <span class=\"token keyword\">return</span> Item<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>queries<span class=\"token punctuation\">(</span>filters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>First, we fetch the 3 query sets and put them in a dictionary with the keys <code>name__startswith</code>, <code>price_gte</code>, <code>price__lte</code>, if they are not there we give the default value '' (which means False).</p>\n<p>Second, our queries function will generate an array of Queries <code>Q</code> of column name <code>k</code> (the key of the dictionary <code>filters.items()</code>) and the filter condition <code>v</code> (the value of <code>filters.items()</code>), but only <code>if v</code> (translates to <code>if True</code>, remember <code>''</code> means False). The function Q takes as arguments named variables, of the form <code>Q(name__startswith='Gra')</code> (named arguments) and this is why I used a dictionary with unpacking, a bit like **kwargs: you can see some doc about that <a href=\"http://book.pythontips.com/en/latest/args_and_kwargs.html\">here</a>.</p>\n<p>Third we pass the filters we generated earlier to the function we just created, which will return an array of Queries, but our <code>Item.objects.filter</code> takes multiple queries as arguments and not an array of queries, so again we need to unpack the unnamed variables like this: <code>*queries(filters)</code>, this will look like this after unpacking: <code>Item.objects.filter(Q1, Q2, Q3)</code> where <code>Q1=Q(name__startswith='Gra'), Q2=Q(price_gte=300), Q3=Q(price__lte=700)</code>.</p>\n<p>Finally, you can add more complex filtering like <code>category__in=[1,2,3]</code> (where 1 2 and 3 are category ids). To do this you just need to parse your array in the filters level like this:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">{</span><br>    <span class=\"token string\">'category__in'</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'category__in'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>This will split your query parameter <code>category__in=1,2,3</code> into an array <code>[1,2,3]</code>, again if the array is empty, the <code>queries(filters)</code> function will evaluate <code>[]</code> to <code>False</code></p>\n<p>Happy Pythoning!</p>\n<p><em>PS: If you find an issue or a way to improve this article, please open an issue <a href=\"https://github.com/serafss2/serafss2.github.io/issues\">here</a>.</em></p>\n<p><em>Note1: Try these 'Falsy' variables</em></p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'List is empty'</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'String is empty'</span><span class=\"token punctuation\">)</span></code></pre>\n<p><em>Note2: You could also take all query parameters and directly build your dictionary, something like:</em></p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span>Q<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span><span class=\"token punctuation\">{</span>k<span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">]</span></code></pre>\n<p><em>You could also make a function that would translate <code>__in</code> to splitting the value, etc. I didn't try something like this yet but if I find the need I would update this article, if you do it, feel free to contribute</em></p>\n",
      "date_published": "2019-02-17T00:00:00-05:00"
    }
  ]
}
